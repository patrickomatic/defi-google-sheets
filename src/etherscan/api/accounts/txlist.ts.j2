/// <reference path="../../common.ts" />

interface EtherscanAccountTxlistResponse {
  blockHash: string;
  blockNumber: string;
  confirmations: string;
  contractAddress: string;
  cumulativeGasUsed: string;
  from: string;
  functionName: string;
  gas: string;
  gasPrice: string;
  gasUsed: string;
  hash: string;
  input: string;
  isError: string;
  methodId: string;
  nonce: string;
  timeStamp: string;
  to: string;  
  transactionIndex: string;
  txreceipt_status: string;
  value: string;
}

/**
 * {{es.accounts.item[2].name}}
 *
 * {{es.common.params.address}}
 * {{common.params.fields}}
 * {{es.common.params.page}}
 * {{es.common.params.offset}}
 * {{es.common.params.sort}}
 * {{es.common.params.startblock}}
 * {{es.common.params.endblock}}
 *
 * @example
 * =ES$TXLIST("0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B", "*", 1, 3)
 *
*@returns {string[]} blockHash,blockNumber,confirmations,contractAddress,cumulativeGasUsed,from,functionName,gas,gasPrice,gasUsed,hash,input,isError,methodId,nonce,timeStamp,to,transactionIndex,txreceipt_status,value
 *
 * @customfunction
 */
function ES$TXLIST(
  address: EthereumAddress,
  fields: FieldsOrAll<EtherscanAccountTxlistResponse> = '*',
  page?: number,
  offset?: number,
  sort?: EtherscanSort,
  startblock?: number,
  endblock?: number,
) {
  return pickFields_({
    rows: esRequest_<EtherscanAccountTxlistResponse[]>({
      caller: 'ES$TXLIST',
      action: 'txlist',
      module: 'account',
      params: {
        address: validateEthereumAddress_(address),
        startblock,
        endblock,
        page,
        offset,
        sort,
      },
    }),
    fields,
  });
}
