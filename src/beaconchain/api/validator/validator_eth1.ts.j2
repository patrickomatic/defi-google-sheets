/// <reference path="../../common.ts" />

interface BeaconchainValidatorEth1 {
  publickey: Hex;
  valid_signature: boolean;
  validatorindex: number;
}

/**
 * {{bc.api.paths["/api/v1/validator/eth1/{eth1address}"]["get"].summary}}
 *
 * @param {EthereumAddress} eth1address - {{bc.api.paths["/api/v1/validator/eth1/{eth1address}"]["get"].parameters[0].description}}
 * {{common.params.fields}}
 * {{common.params.offset}}
 * {{common.params.limit}}
 *
 * @example
 * =BC$VALIDATOR_ETH1("0xf1b1a29331602f44d4f3921271596ca73e2dbf3c", "*", 0, 3)
 *
 * @returns {string[]} publickey,valid_signature,validatorindex
 *
 * @customfunction
 */
function BC$VALIDATOR_ETH1(
  eth1address: EthereumAddress,
  fields: FieldsOrAll<BeaconchainValidatorEth1> = '*',
  offset?: number,
  limit?: number,
) {
  if (eth1address.includes(",")) {
    return pickFields_<BeaconchainValidatorEth1>({
      rows: bcRequest_<BeaconchainValidatorEth1[]>({
        apiPath: `validator/eth1/${eth1address}`,
        offset,
        limit,
      }),
      fields,
    });
  } else {
    return pickFields_<BeaconchainValidatorEth1>({
      row: bcRequest_<BeaconchainValidatorEth1>({
        apiPath: `validator/eth1/${eth1address}`,
      }),
      fields,
    });
  }
}
