/// <reference path="../../common.ts" />

// these are calculated by code
interface BeaconchainDerivedValidatorStats {
  date: Date;
}

/* eslint-disable babel/camelcase */
interface BeaconchainValidatorStats {
  attester_slashings: number;
  day: number;
  deposits: number;
  deposits_amount: number;
  end_balance: number;
  end_effective_balance: number;
  max_balance: number;
  max_effective_balance: number;
  min_balance: number;
  min_effective_balance: number;
  missed_attestations: number;
  missed_blocks: number;
  missed_sync: number;
  orphaned_attestations: number;
  orphaned_blocks: number;
  orphaned_sync: number;
  participated_sync: number;
  proposed_blocks: number;
  proposer_slashings: number;
  start_balance: number;
  start_effective_balance: number;
  validatorindex: number;
}
/* eslint-enable babel/camelcase */

type BeaconchainAllValidatorStats = BeaconchainValidatorStats & BeaconchainDerivedValidatorStats;
type BeaconchainValidatorStat = keyof BeaconchainAllValidatorStats;

function dateFromEpic_(date: number): Date {
  const statsDate = new Date(BEACON_CHAIN_EPOCH_DATE);
  statsDate.setDate(statsDate.getDate() + date);
  return statsDate;
}

/**
 * {{bc.api.paths["/api/v1/validator/stats/{index}"]["get"].summary}}
 *
 * @param {number} validatorIndex {{bc.api.paths["/api/v1/validator/stats/{index}"]["get"].parameters[0].description}}
 * {{common.params.fields}}
 * {{common.params.offset}}
 * {{common.params.limit}}
 *
 * @example
 * =BC$VALIDATOR_STATS(209732, "*", 0, 3)
 *
 * @returns {string[]} attester_slashings,day,deposits,deposits_amount,end_balance,end_effective_balance,max_balance,max_effective_balance,min_balance,min_effective_balance,missed_attestations,missed_blocks,missed_sync,orphaned_attestations,orphaned_blocks,orphaned_sync,participated_sync,proposed_blocks,proposer_slashings,start_balance,start_effective_balance,validatorindex
 *
 * @customfunction
 */
function BC$VALIDATOR_STATS(
  validatorIndex: number,
  fields: FieldsOrAll<BeaconchainAllValidatorStats> = '*',
  offset?: number,
  limit?: number,
)  {
  return pickFields_<BeaconchainValidatorStats, BeaconchainDerivedValidatorStats>({
    rows: bcRequest_<BeaconchainValidatorStats[]>({
      apiPath: `validator/stats/${validatorIndex}`,
      offset,
      limit,
    }),
    fields,
    virtualFields: {
      date: (row) => dateFromEpic_(row.day),
    },
  });
}
