/// <reference path="../../common.ts" />

interface BeaconchainValidatorAttestations {
  attesterslot: number;
  committeeindex: number;
  epoch: number;
  inclusionslot: number;
  status: number;
  validatorindex: number;
  week: number;
}

/**
 * {{bc.api.paths["/api/v1/validator/{indexOrPubkey}/attestations"]["get"].summary}}
 *
 * {{bc.common.params.indexOrPubkey}} {{bc.api.paths["/api/v1/validator/{indexOrPubkey}/attestations"]["get"].parameters[0].description}}
 * {{common.params.fields}}
 * {{common.params.offset}}
 * {{common.params.limit}}
 *
 * @example
 * =BC$VALIDATOR_ATTESTATIONS(209732, "*", 0, 3)
 *
 * @returns {string[]} attesterslot,committeeindex,epoch,inclusionslot,status,validatorindex,week
 *
 * @customfunction
 */
function BC$VALIDATOR_ATTESTATIONS(
  indexOrPubkey: IndexOrPubkey | IndexOrPubkey[],
  fields: FieldsOrAll<BeaconchainValidatorAttestations> = '*',
  offset?: number,
  limit?: number,
)  {
  return pickFields_<BeaconchainValidatorAttestations>({
    rows: bcRequest_<BeaconchainValidatorAttestations[]>({
      apiPath: `validator/${validateIndexOrPubkey_(indexOrPubkey)}/attestations`,
      offset,
      limit,
    }),
    fields,
  });
}
