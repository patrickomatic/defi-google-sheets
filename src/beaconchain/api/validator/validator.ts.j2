/// <reference path="../../common.ts" />

interface BeaconchainValidator {
  activationeligibilityepoch: number;
  activationepoch: number;
  balance: Gwei;
  effectivebalance: Gwei;
  exitepoch: number;
  lastattestationslot: number;
  name: null;
  pubkey: Hex;
  slashed: boolean;
  status: string;
  validatorindex: number;
  withdrawableepoch: number;
  withdrawalcredentials: Hex;
}
/**
 * {{bc.api.paths["/api/v1/validator/{indexOrPubkey}"]["get"].summary}}
 *
 * {{bc.common.params.indexOrPubkey}} {{bc.api.paths["/api/v1/validator/{indexOrPubkey}"]["get"].parameters[0].description}}
 * {{common.params.fields}}
 * {{common.params.offset}}
 * {{common.params.limit}}
 *
 * @example
 * =BC$VALIDATOR(209732, "*", 0, 3)
 *
 * @returns {string[]} activationeligibilityepoch,activationepoch,balance,effectivebalance,exitepoch,lastattestationslot,name,pubkey,slashed,status,validatorindex,withdrawableepoch,withdrawalcredentials
 *
 * @customfunction
 */
function BC$VALIDATOR(
  indexOrPubkey: IndexOrPubkey | IndexOrPubkey[],
  fields: FieldsOrAll<BeaconchainValidator> = '*',
  offset?: number,
  limit?: number,
) {
  const indexesOrPubkeys = validateIndexOrPubkey_(indexOrPubkey);

  if (indexesOrPubkeys.includes(",")) {
    return pickFields_<BeaconchainValidator>({
      rows: bcRequest_<BeaconchainValidator[]>({
        apiPath: `validator/${indexesOrPubkeys}`,
        offset,
        limit,
      }),
      fields,
    });
  } else {
    return pickFields_<BeaconchainValidator>({
      row: bcRequest_<BeaconchainValidator>({
        apiPath: `validator/${indexesOrPubkeys}`,
      }),
      fields,
    });
  }
}
