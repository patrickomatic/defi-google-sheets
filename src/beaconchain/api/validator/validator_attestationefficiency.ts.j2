/// <reference path="../../common.ts" />

interface BeaconchainValidatorAttestationefficiency {
  validatorindex: number;
  attestation_efficiency: number;
}

/**
 * {{bc.api.paths["/api/v1/validator/{indexOrPubkey}/attestationefficiency"]["get"].summary}}
 *
 * {{bc.common.params.indexOrPubkey}} {{bc.api.paths["/api/v1/validator/{indexOrPubkey}/attestationefficiency"]["get"].parameters[0].description}}
 * {{common.params.fields}}
 * {{common.params.offset}}
 * {{common.params.limit}}
 *
 * @example
 * =BC$VALIDATOR_ATTESTATIONEFFICIENCY(209732, "*", 0, 3)
 *
 * @returns {string[]} attestationefficiency,validatorindex
 *
 * @customfunction
 */
function BC$VALIDATOR_ATTESTATIONEFFICIENCY(
  indexOrPubkey: IndexOrPubkey | IndexOrPubkey[],
  fields: FieldsOrAll<BeaconchainValidatorAttestationefficiency> = '*',
  offset?: number,
  limit?: number,
): SpreadsheetRow[] {
  const indexesOrPubkeys = validateIndexOrPubkey_(indexOrPubkey);
  return pickFields_<BeaconchainValidatorAttestationefficiency>({
    rows: bcRequest_<BeaconchainValidatorAttestationefficiency[]>({
      apiPath: `validator/${indexOrPubkey}/attestationefficiency`,
      offset,
      limit,
    }),
    fields,
  });
}
