/// <reference path="../../common.ts" />

interface BeaconchainValidatorAttestationefficiency {
  validatorindex: number;
  attestation_efficiency: number;
}

/**
 * {{bc.paths["/api/v1/validator/{indexOrPubkey}/attestationefficiency"]["get"].summary}}
 *
 * @param {indexOrPubkey} {{bc.paths["/api/v1/validator/{indexOrPubkey}/attestationefficiency"]["get"].parameters[0].description}}
 * @param {fields} {{common.fields}}
 * @param {offset} {{common.offset}}
 * @param {limit} {{common.limit}}
 *
 * @customfunction
 */
function BC$VALIDATOR_ATTESTATIONEFFICIENCY(
  indexOrPubkey: IndexOrPubkey | IndexOrPubkey[],
  fields: FieldsOrAll<BeaconchainValidatorAttestationefficiency> = '*',
  offset?: number,
  limit?: number,
): SpreadsheetRow[] {
  // XXX validate indexOrPubkey
  // XXX indexOrPubkey can also be an array (join it together)
  return pickFields_<BeaconchainValidatorAttestationefficiency>({
    rows: bcRequest_<BeaconchainValidatorAttestationefficiency[]>({
      apiPath: `v1/validator/${indexOrPubkey}/attestationefficiency`,
      offset,
      limit,
    }),
    fields,
  });
}
