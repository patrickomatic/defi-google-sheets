/// <reference path="../../common.ts" />

interface BeaconchainEpochBlocksResponse {
  attestationscount: number;
  attesterslashingscount: number;
  blockroot: Hex;
  depositscount: number;
  epoch: number;
  eth1data_blockhash: Hex;
  eth1data_depositcount: number;
  eth1data_depositroot: Hex
  exec_base_fee_per_gas: number;
  exec_block_hash: Hex;
  exec_block_number: number;
  exec_extra_data: Hex;
  exec_fee_recipient: Hex;
  exec_gas_limit: number;
  exec_gas_used: number;
  exec_logs_bloom: Hex;
  exec_parent_hash: Hex;
  exec_random: Hex;
  exec_receipts_root: Hex;
  exec_state_root: Hex;
  exec_timestamp: number;
  exec_transactions_count: number;
  graffiti: Hex;
  graffiti_text: string;
  parentroot: Hex;
  proposer: number;
  proposerslashingscount: number;
  randaoreveal: Hex;
  signature: Hex;
  slot: number;
  stateroot: Hex;
  status: number;
  syncaggregate_bits: Hex;
  syncaggregate_participation: number;
  syncaggregate_signature: Hex;
  voluntaryexitscount: number;
}

/**
 * {{bc.api.paths["/api/v1/epoch/{epoch}/blocks"]["get"].summary}}
 *
 * @param {number | 'latest'} epoch - {{bc.api.paths["/api/v1/epoch/{epoch}/blocks"]["get"].parameters[0].description}}
 * {{common.params.fields}}
 * {{common.params.offset}}
 * {{common.params.limit}}
 *
 * @example
 * =BC$EPOCH_BLOCKS("latest", "*", 0, 3)
 *
 * @returns {string[]} attestationscount,attesterslashingscount,blockroot,depositscount,epoch,eth1data_blockhash,eth1data_depositcount,eth1data_depositroot,exec_base_fee_per_gas,exec_block_hash,exec_block_number,exec_extra_data,exec_fee_recipient,exec_gas_limit,exec_gas_used,exec_logs_bloom,exec_parent_hash,exec_random,exec_receipts_root,exec_state_root,exec_timestamp,exec_transactions_count,graffiti,graffiti_text,parentroot,proposer,proposerslashingscount,randaoreveal,signature,slot,stateroot,status,syncaggregate_bits,syncaggregate_participation,syncaggregate_signature,voluntaryexitscount
 *
 * @customfunction
 */
function BC$EPOCH_BLOCKS(
  epoch: number | 'latest',
  fields: FieldsOrAll<BeaconchainEpochBlocksResponse> = '*',
  offset?: number,
  limit?: number,
): SpreadsheetRow[] {
  return pickFields_({
    rows: bcRequest_<BeaconchainEpochBlocksResponse[]>({
      apiPath: `epoch/${epoch}/blocks`,
      offset,
      limit,
    }),
    fields,
  });
}


