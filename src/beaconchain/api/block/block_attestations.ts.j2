/// <reference path="../../common.ts" />

interface BeaconchainBlockAttestationsResponse {
  aggregationbits: Hex;
  beaconblockroot: Hex;
  block_index: number;
  block_root: null | Hex;
  block_slot: number;
  committeeindex: number;
  signature: Hex;
  slot: number;
  source_epoch: number;
  source_root: Hex;
  target_epoch: number;
  target_root: Hex;
  validators: number[];
}

/**
 * {{bc.paths["/api/v1/block/{slot}/attestations"]["get"].summary}}
 *
 * @param {number} slot - {{bc.paths["/api/v1/block/{slot}/attestations"]["get"].parameters[0].description}}
 * {{common.params.fields}}
 * {{common.params.offset}}
 * {{common.params.limit}}
 *
 * @customfunction
 */
function BC$BLOCK_ATTESTATIONS(
  slot: number,
  fields: FieldsOrAll<BeaconchainBlockAttestationsResponse> = '*',
  offset?: number,
  limit?: number,
): SpreadsheetRow[] {
  return pickFields_({
    rows: bcRequest_<BeaconchainBlockAttestationsResponse[]>({
      apiPath: `block/${asNumber_(slot)}/attestations`,
      limit,
      offset,
    }),
    fields,
  });
}
